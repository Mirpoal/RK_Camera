package com.example.xng.rkcamera.Map.gps;import android.util.Log;public class GpsParseUtil {    static final String TAG = "GpsParseUtil";    public static final int NMEA_MESSAGE_ID_LEN = 6;    public static final int NMEA_MESSAGE_LEN = 100;    public static final String VALID_DATA = "A";    public static final String INVALID_DATA = "N";    /* 1nmi = 1.852km = 1852m */    public static final int NAUTICAL_MILE = 1852;    /* NMEA-0183 messages: $GNRMC or $GPRMC or $BDRMC */    public static final String XXRMC = "RMC";    public static final String XXGSV = "GSV";    public static final String XXGGA = "GGA";    public static final String XXGLL = "GLL";    public static final String XXVTG = "VTG";    public static final String XXGSA = "GSA";    public static final String GPSCAMTIME = "$GPSCAMTIME";    public static final String GPSENDTIME = "$GPSENDTIME";    /* recommended minimum specific GNSS data */    public static final int RMC = 0;    /* GNSS satellites in view */    public static final int GSV = 1;    /* global positoning system fixed data */    public static final int GGA = 2;    /* geogrphic position â€“latitude / longitude */    public static final int GLL = 3;    /* course over ground and ground speed */    public static final int VTG = 4;    /* GNSS DOP and active satellites */    public static final int GSA = 5;    /*     * example:     * $GPGGA,<1>,<2>,<3>,<4>,<5>,<6>,<7>,<8>,<9>,<10>,<11>,<12>,<13>,<14>*hh<CR><LF>     */    public static final int GPS_DATA1 = 1;    public static final int GPS_DATA2 = 2;    public static final int GPS_DATA3 = 3;    public static final int GPS_DATA4 = 4;    public static final int GPS_DATA5 = 5;    public static final int GPS_DATA6 = 6;    public static final int GPS_DATA7 = 7;    public static final int GPS_DATA8 = 8;    public static final int GPS_DATA9 = 9;    public static final int GPS_DATA10 = 10;    public static final int GPS_DATA11 = 11;    public static final int GPS_DATA12 = 12;    public static final int GPS_DATA13 = 13;    public static final int GPS_DATA14 = 14;    private static void analysisGsv(int nmeaCount, String nmeaData, GpsInfo info) {        switch (nmeaCount) {            case GPS_DATA3:                info.setSatellites(Integer.parseInt(nmeaData));                //Log.d(TAG, "satellites: " + info.getSatellites());                break;            default:                break;        }    }    private static void analysisGga(int nmeaCount,String nmeaData, GpsInfo info) {        int date;        //Log.d(TAG, "analysisGga, nmeaCount: " + nmeaCount);        switch (nmeaCount) {            case GPS_DATA1:                date = (int) Float.parseFloat(nmeaData);                /* the calibration time zone, Beijing time */                info.setTime(date / 10000 + 8, (date / 100) % 100, date % 100);                //Log.d(TAG, "hour-min-sec: " + info.getDateTime().getHour() + "-" +                //        info.getDateTime().getMin() + "-" + info.getDateTime().getSec());                break;            case GPS_DATA2:                float latitude = Float.parseFloat(nmeaData);                info.setLatitude(degreeMinuteToDegree(latitude));                //Log.d(TAG, "latitude: "+ info.getLatitude());                break;            case GPS_DATA3:                info.setLatitudeIndicator(nmeaData);                //Log.d(TAG, "latitude_indicator: " + info.getLatitudeIndicator());                break;            case GPS_DATA4:                float longitude = Float.parseFloat(nmeaData);                info.setLongitude(degreeMinuteToDegree(longitude));                //Log.d(TAG, "longitude: " + info.getLongitude());                break;            case GPS_DATA5:                info.setLongitudeIndicator(nmeaData);                //Log.d(TAG, "longitude_indicator: " + info.getLongitudeIndicator());                break;            case GPS_DATA6:                info.setPositionFixIndicator(Integer.parseInt(nmeaData));                //Log.d(TAG, "position_fix_indicator: "+ info.getPositionFixIndicator());                break;            case GPS_DATA7:                info.setSatellites(Integer.parseInt(nmeaData));                //Log.d(TAG, "satellites: " + info.getSatellites());                break;            case GPS_DATA9:                info.setAltitude(Float.parseFloat(nmeaData));                //Log.d(TAG, "altitude: " + info.getAltitude());                break;            case GPS_DATA8:            case GPS_DATA10:            case GPS_DATA11:            case GPS_DATA12:            case GPS_DATA13:            case GPS_DATA14:                break;            default:                break;        }    }    private static void analysisRmc(int nmeaCount, String nmeaData, GpsInfo info)    {        int date;        //Log.d(TAG, "analysisRmc, nmeaCount: " + nmeaCount);        switch (nmeaCount) {            case GPS_DATA1:                date = (int) Float.parseFloat(nmeaData);                /* the calibration time zone, Beijing time */                info.setTime(date / 10000 + 8, (date / 100) % 100, date % 100);                //Log.d(TAG, "hour-min-sec: " + info.getDateTime().getHour() + "-" +                //        info.getDateTime().getMin() + "-" + info.getDateTime().getSec());                break;            case GPS_DATA2:                info.setStatus(nmeaData);                //Log.d(TAG, "status: " + info.getStatus());                break;            case GPS_DATA3:                float latitude = Float.parseFloat(nmeaData);                info.setLatitude(degreeMinuteToDegree(latitude));                //Log.d(TAG, "latitude: "+ info.getLatitude());                break;            case GPS_DATA4:                info.setLatitudeIndicator(nmeaData);                //Log.d(TAG, "latitude_indicator: " + info.getLatitudeIndicator());                break;            case GPS_DATA5:                float longitude = Float.parseFloat(nmeaData);                info.setLongitude(degreeMinuteToDegree(longitude));                //Log.d(TAG, "longitude: " + info.getLongitude());                break;            case GPS_DATA6:                info.setLongitudeIndicator(nmeaData);                //Log.d(TAG, "longitude_indicator: " + info.getLongitudeIndicator());                break;            case GPS_DATA7:                float speed = Float.parseFloat(nmeaData);                /* nmi/h converted to km/h */                info.setSpeed((speed * NAUTICAL_MILE) / 1000);                //Log.d(TAG, "speed: " + info.getSpeed());                break;            case GPS_DATA8:                info.setDirection(Float.parseFloat(nmeaData));                //Log.d(TAG, "direction:" + info.getDirection());                break;            case GPS_DATA9:                date = Integer.parseInt(nmeaData);                info.setDate(date % 100 + 100 + 1900, (date / 100) % 100, date / 10000);                //Log.d(TAG, "years-months-day: " + info.getDateTime().getYear() + "-" +                //        info.getDateTime().getMonth() + "-" + info.getDateTime().getDay());                break;            case GPS_DATA10:            case GPS_DATA11:            case GPS_DATA12:                break;            default:                break;        }    }    private static boolean analysisMsgType(int searchType, int nmeaCount, String nmeaData, GpsInfo info) {        switch (searchType) {            case RMC:                analysisRmc(nmeaCount, nmeaData, info);                break;            case GSV:                analysisGsv(nmeaCount, nmeaData, info);                break;            case GGA:                analysisGga(nmeaCount, nmeaData, info);                break;        }        return true;    }    private static double degreeMinuteToDegree(float dm) {        double degree = 0.0f;        int d = 0, integer = 0;        double m = 0.0f, decimals = 0.0f;        integer = (int)dm;        decimals = dm - integer;        /* ddmm.mmmmm or dddmm.mmmmm */        d = integer / 100;        m = integer % 100 + decimals;        /* 1 degree = 60 minute */        degree = d + (m / 60);        return degree;    }    public static boolean nmeaDataParse(GpsInfo info, String data, int searchType, int dataLen) {        int i;        boolean ret = false;        //Log.d(TAG, "data len: " + dataLen + ", data: " + data);        if (dataLen <= NMEA_MESSAGE_ID_LEN) {            Log.d(TAG, "gps data is invalid, len: " + dataLen);            return false;        }        String[] nmeaData = data.split(",");        //Log.d(TAG, "nmeaData[].length: " + nmeaData.length);        for (i = 0; i < nmeaData.length; i++) {            //Log.d(TAG, "nmeaData[" + i + "]: " + nmeaData[i]);            if (!nmeaData[i].equals("")) {                ret = analysisMsgType(searchType, i, nmeaData[i], info);                if (!ret)                    break;            }        }        return ret;    }}